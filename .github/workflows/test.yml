on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

name: Test

env:
  NAME: generic

jobs:
  dump-ctx:
    name: Context
    runs-on: ubuntu-latest
    steps:
      - name: Dump Github context
        uses: crazy-max/ghaction-dump-context@v2
  build-and-release:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-musl, os: linux, arch: amd64, runner: ubuntu-latest, cross: false }
          #- { target: i686-unknown-linux-musl, os: linux, arch: "386", runner: ubuntu-latest, cross: false }
          #- { target: aarch64-unknown-linux-musl, os: linux, arch: arm64, runner: ubuntu-latest, cross: true }
          #- { target: arm-unknown-linux-musleabi, os: linux, arch: arm, runner: ubuntu-latest, cross: true }
          #- { target: x86_64-unknown-freebsd, os: freebsd, arch: amd64, runner: ubuntu-latest, cross: true } # Does not run
          #- { target: i686-unknown-freebsd, os: freebsd, arch: "386", runner: ubuntu-latest, cross: true } # Does not compile
          - { target: x86_64-apple-darwin, os: darwin, arch: amd64, runner: macos-latest, cross: false }
          #- { target: aarch64-apple-darwin, os: darwin, arch: arm64, runner: macos-latest, cross: false } # Does not compile
          - { target: x86_64-pc-windows-msvc, os: windows, arch: amd64, runner: windows-latest, cross: false }
          - { target: i686-pc-windows-msvc, os: windows, arch: "386", runner: windows-latest, cross: false }
          #- { target: aarch64-pc-windows-msvc, os: windows, arch: arm64, runner: windows-latest, cross: false } # Does not compile
          #- { target: wasm32-wasi, os: wasi, arch: wasm, runner: ubuntu-latest, cross: false } # Does not compile
    runs-on: ${{ matrix.job.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        if: not ${{ matrix.job.cross }}
      - name: Install Cross Compiler
        if: matrix.job.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-multilib

          #TOOLCHAIN_AARCH64="aarch64--musl--stable-2018.11-1"
          #TC_AARCH64_URL="https://toolchains.bootlin.com/downloads/releases/toolchains/aarch64/tarballs/${TOOLCHAIN_AARCH64}.tar.bz2"

          #( cd /opt ; curl -o- ${TC_AARCH64_URL} | tar -xjf - )
          #CC_aarch64_unknown_linux_musl: aarch64-buildroot-linux-musl-gcc
          #CXX_aarch64_unknown_linux_musl: aarch64-buildroot-linux-musl-g++
          #LD_aarch64_unknown_linux_musl: aarch64-buildroot-linux-musl-ld
          #export PATH="${PATH}:/opt/${TOOLCHAIN_AARCH64}/bin"

          
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
          toolchain: 1.76.0
          components: rust-src,rustfmt,clippy
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          shared-key: "build-${{ matrix.job.target }}"
      - name: Build
        run: |
          cargo build --locked --release --target ${{ matrix.job.target }}
      - name: Test
        run: |
          cargo test --locked --release --target ${{ matrix.job.target }}
      - name: Format
        run: |
          cargo fmt --check
      - name: Clippy
        run: |
          cargo clippy --no-deps -- -Dwarnings -Dunused_extern_crates
      - name: Doc
        if: matrix.job.target == 'x86_64-unknown-linux-musl'
        run: |
          tools/generate-docs --provider-name "${NAME}" --provider-binary "target/x86_64-unknown-linux-musl/release/terraform-provider-${NAME}"
          git diff --exit-code --name-only docs
