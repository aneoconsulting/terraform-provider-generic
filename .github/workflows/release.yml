on:
  release:
    types: [released]

name: Release

env:
  NAME: generic
  TAG: ${{ github.event.release.tag_name }}

jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - run: |
          set -ex
          cargo_version="$(sed -n 's/^version\s*=\s*"\(.*\)"\s*$/\1/p' Cargo.toml)"
          test "$cargo_version" = "${TAG#v}"

  build:
    name: Build
    needs: check-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-musl, os: linux, arch: amd64, runner: ubuntu-latest, cross: true }
          #- { target: i686-unknown-linux-musl, os: linux, arch: "386", runner: ubuntu-latest, cross: true }
          #- { target: aarch64-unknown-linux-musl, os: linux, arch: arm64, runner: ubuntu-latest, cross: true }
          #- { target: arm-unknown-linux-musleabi, os: linux, arch: arm, runner: ubuntu-latest, cross: true }
          #- { target: x86_64-unknown-freebsd, os: freebsd, arch: amd64, runner: ubuntu-latest, cross: true } # Does not run
          #- { target: i686-unknown-freebsd, os: freebsd, arch: "386", runner: ubuntu-latest, cross: true } # Does not compile
          - { target: x86_64-apple-darwin, os: darwin, arch: amd64, runner: macos-latest, cross: false }
          - { target: aarch64-apple-darwin, os: darwin, arch: arm64, runner: macos-latest, cross: false } # Does not compile
          - { target: x86_64-pc-windows-msvc, os: windows, arch: amd64, runner: windows-latest, cross: false }
          - { target: i686-pc-windows-msvc, os: windows, arch: "386", runner: windows-latest, cross: false }
          #- { target: aarch64-pc-windows-msvc, os: windows, arch: arm64, runner: windows-latest, cross: false } # Does not compile
          #- { target: wasm32-wasi, os: wasi, arch: wasm, runner: ubuntu-latest, cross: false } # Does not compile
    runs-on: ${{ matrix.job.runner }}
    env:
      TARGET: ${{ matrix.job.target }}
      OS: ${{ matrix.job.os }}
      ARCH: ${{ matrix.job.arch }}
      PLATFORM: "${{ matrix.job.os }}_${{ matrix.job.arch }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with:
          tool: protoc,sccache
        if: not ${{ matrix.job.cross }}
      - name: Install Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.76.0
          target: ${{ matrix.job.target }}
          components: rust-src,rustfmt,clippy
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          shared-key: "build-${{ matrix.job.target }}"
      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: ${{ matrix.job.cross }}
      #     args: --release --target=${{ matrix.job.target }} --locked
      #     command: build
      - name: Build
        run: |
          cargo build --locked --release --target ${{ matrix.job.target }}
      - name: Create Assets
        if: runner.os != 'Windows'
        run: |
          set -ex
          mkdir release
          mv "target/${TARGET}/release/terraform-provider-${NAME}" "terraform-provider-${NAME}_${TAG#v}"
          zip "release/terraform-provider-${NAME}_${TAG#v}_${PLATFORM}.zip" "terraform-provider-${NAME}_${TAG#v}"
      - name: Create Assets
        if: runner.os == 'Windows'
        run: |
          $version = ${env:TAG} -replace "v"
          New-Item -ItemType Directory -Name release
          Move-Item -Path "target/${env:TARGET}/release/terraform-provider-${env:NAME}.exe" -Destination "terraform-provider-${env:NAME}_${version}.exe"
          Compress-Archive -Path "terraform-provider-${env:NAME}_${version}.exe" -Destination "release/terraform-provider-${env:NAME}_${version}_${env:PLATFORM}.zip"
      - name: Upload Assets
        shell: sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: release
        run: |
          gh release upload "${TAG}" *
  publish:
    needs: build
    permissions:
      contents: write
    uses: ./.github/workflows/release-publish.yml
    with:
      name: generic
      tag: ${{ github.event.release.tag_name }}
    secrets: inherit
  gh-pages:
    needs: publish
    permissions:
      contents: read
      pages: write
      id-token: write
    uses: ./.github/workflows/gh-pages.yml
    with:
      name: generic
    secrets: inherit
  failure:
    needs: [build, check-version, gh-pages, publish]
    if: cancelled() || failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Remove tag
        run: |
          git push --delete origin "$TAG"
